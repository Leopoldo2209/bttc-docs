"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),c=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?l.createElement(h,o(o({ref:t},u),{},{components:n})):l.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1002:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var l=n(7462),a=(n(7294),n(3905));const r={},o="Fullnode Deployment",i={unversionedId:"node/build-fullnode",id:"node/build-fullnode",title:"Fullnode Deployment",description:"System requirements",source:"@site/docs/node/build-fullnode.md",sourceDirName:"node",slug:"/node/build-fullnode",permalink:"/docs/node/build-fullnode",draft:!1,editUrl:"https://github.com/bttcprotocol/bttc-docs/tree/master/docs/node/build-fullnode.md",tags:[],version:"current",lastUpdatedAt:1724138736,formattedLastUpdatedAt:"Aug 20, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Genesis Contracts",permalink:"/docs/smartcontract/genesis-contracts"},next:{title:"Delivery and Bttc Snapshots",permalink:"/docs/node/snapshot"}},s={},c=[{value:"System requirements",id:"system-requirements",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:3},{value:"Install Binaries",id:"install-binaries",level:3},{value:"Install Delivery",id:"install-delivery",level:4},{value:"Install Bttc",id:"install-bttc",level:4},{value:"Set up fullnode files",id:"set-up-fullnode-files",level:3},{value:"Fetch the launch repository",id:"fetch-the-launch-repository",level:4},{value:"Set up the launch directory",id:"set-up-the-launch-directory",level:4},{value:"Set up the network directories",id:"set-up-the-network-directories",level:4},{value:"Set up Delivery",id:"set-up-delivery",level:5},{value:"Set up Bttc",id:"set-up-bttc",level:5},{value:"Configure the full node",id:"configure-the-full-node",level:3},{value:"Configure the Delivery services",id:"configure-the-delivery-services",level:4},{value:"Configure the Bttc Service",id:"configure-the-bttc-service",level:4},{value:"Configure firewall",id:"configure-firewall",level:4},{value:"Start the full node",id:"start-the-full-node",level:3},{value:"Start the Delivery service",id:"start-the-delivery-service",level:4},{value:"Start the Bttc service",id:"start-the-bttc-service",level:4}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fullnode-deployment"},"Fullnode Deployment"),(0,a.kt)("h2",{id:"system-requirements"},"System requirements"),(0,a.kt)("p",null,"This article lists the minimum and recommended system requirements for running Fullnode nodes, which must be run on different machines for Sentinel and Verifier nodes."),(0,a.kt)("p",null,"Minimum system requirements\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RAM: 32 GB"),(0,a.kt)("li",{parentName:"ul"},"CPU: 8-core"),(0,a.kt)("li",{parentName:"ul"},"Storage: 1 TB SSD")),(0,a.kt)("p",null,"For Amazon Web Services (AWS), the equivalent of the minimum requirements instances are ",(0,a.kt)("strong",{parentName:"p"},"m5d.2xlarge")," or ",(0,a.kt)("strong",{parentName:"p"},"t3.2xlarge")," with unlimited credits selected."),(0,a.kt)("p",null,"Recommended system requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RAM\uff1a64GB"),(0,a.kt)("li",{parentName:"ul"},"CPU: 16-core"),(0,a.kt)("li",{parentName:"ul"},"Storage: 1TB SSD"),(0,a.kt)("li",{parentName:"ul"},"Bandwidth: 1 Gbit/s")),(0,a.kt)("p",null,"For Amazon Web Services (AWS), the recommended example is ",(0,a.kt)("strong",{parentName:"p"},"m5d.4xlarge"),", for OVH, the recommended example is ",(0,a.kt)("strong",{parentName:"p"},"infra-3"),", for the network, expect 3-5TB of data transfer per month."),(0,a.kt)("p",null,"During the process of following the instructions in this section, you will need to wait for the Delivery service and BTTC service to fully synchronise, a process that will take a few hours. Alternatively, you can use an officially maintained snapshot, which will reduce the synchronisation time to a few minutes."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null," One machine."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"build-essential")," installed on fullnode machine(optional).\nTo install(only required in ubuntu):",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt-get install build-essential\n"))),(0,a.kt)("li",{parentName:"ul"},"Go 1.17 installed on fullnode machine.\nTo install:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wget https://gist.githubusercontent.com/ssandeep/a6c7197811c83c71e5fead841bab396c/raw/go-install.sh\nbash go-install.sh\nsudo ln -nfs ~/.go/bin/go /usr/bin/go\n")))),(0,a.kt)("h3",{id:"overview"},"Overview"),(0,a.kt)("p",null,"To get to running a full node, do the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. Have the one machine prepared.\n2. Install the Delivery and Bttc binaries on the fullnode machine.\n3. Set up the Delivery and Bttc service files on the fullnode machine.\n4. Set up the Delivery and Bttc services on the fullnode machine.\n5. Configure the full node.\n6. Start the full node.\n7. Check node health with the community.\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: You must follow the exact outlined sequence of actions, otherwise you will run into issues.")),(0,a.kt)("h3",{id:"install-binaries"},"Install Binaries"),(0,a.kt)("h4",{id:"install-delivery"},"Install Delivery"),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/delivery/"},"Delivery repository"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/bttcprotocol/delivery\n")),(0,a.kt)("p",null,"Check out the correct ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/delivery/releases"},"release version"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout RELEASE_TAG\n")),(0,a.kt)("p",null,"where"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RELEASE_TAG \u2014 the tag of the release version that you install.")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout v1.0.0\n")),(0,a.kt)("p",null,"Install Delivery:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"make install\n")),(0,a.kt)("p",null,"Check the installation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"deliveryd version --long\n")),(0,a.kt)("h4",{id:"install-bttc"},"Install Bttc"),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/bttc"},"Bttc repository"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/bttcprotocol/bttc\n")),(0,a.kt)("p",null,"Check out the correct ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/bttc/releases"},"release version"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout RELEASE_TAG\n")),(0,a.kt)("p",null,"where"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RELEASE_TAG \u2014 the tag of the release version that you install.")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout v1.0.1\n")),(0,a.kt)("p",null,"Install BTTC:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"make bttc-all\n")),(0,a.kt)("p",null,"Create symlinks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo ln -nfs ~/bttc/build/bin/bttc /usr/bin/bttc\nsudo ln -nfs ~/bttc/build/bin/bootnode /usr/bin/bootnode\n")),(0,a.kt)("p",null,"Check the installation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bttc version\n")),(0,a.kt)("h3",{id:"set-up-fullnode-files"},"Set up fullnode files"),(0,a.kt)("h4",{id:"fetch-the-launch-repository"},"Fetch the launch repository"),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/launch"},"launch repository"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/bttcprotocol/launch\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note\uff1a\nChoose the correct folder,if you want to join the mainnet,choose mainnet-v1.otherwise,if you want to join the testnet,choose testnet-1029.make sure don't misuse.")),(0,a.kt)("h4",{id:"set-up-the-launch-directory"},"Set up the launch directory"),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir -p node\n")),(0,a.kt)("p",null,"Copy the files and scripts from the ",(0,a.kt)("inlineCode",{parentName:"p"},"launch")," directory to the ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cp -rf launch/mainnet-v1/sentry/sentry/* ~/node\n")),(0,a.kt)("h4",{id:"set-up-the-network-directories"},"Set up the network directories"),(0,a.kt)("h5",{id:"set-up-delivery"},"Set up Delivery"),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd ~/node/delivery\n")),(0,a.kt)("p",null,"Run the setup script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash setup.sh\n")),(0,a.kt)("h5",{id:"set-up-bttc"},"Set up Bttc"),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd ~/node/bttc\n")),(0,a.kt)("p",null,"Run the setup script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash setup.sh\n")),(0,a.kt)("h3",{id:"configure-the-full-node"},"Configure the full node"),(0,a.kt)("p",null,"Login to the remote fullnode machine."),(0,a.kt)("h4",{id:"configure-the-delivery-services"},"Configure the Delivery services"),(0,a.kt)("p",null,"Open for editing ",(0,a.kt)("inlineCode",{parentName:"p"},"vim ~/.deliveryd/config/config.toml"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"config.toml"),", change the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"moniker")," \u2014 any name. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},'moniker = "my-fullnode"'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"seeds")," \u2014 the seed node addresses consisting of a node ID, an IP address, and a port.\nUse the following values from ~/node/delivery/delivery-seeds.txt:\nExample(mainnet):",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'seeds="161c2cbe07fccc8c8a3b10ccdea608569a202c06@54.157.35.210:26656,f3f21c82c04003e3c6ee14eb4d11d5dd0b1f201e@107.20.250.182:26656,ed080edbac1a1a285d265e3e87269aea9f6693b7@54.219.27.155:26656,3114d9ebc7254a27de7092b071bd698d250748aa@54.241.235.101:26656"\n')),"Example(testnet-1029):",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'seeds="3f562eed0fcfabc848db5ebed81633e340352c0c@52.53.72.234:26656,65f774fece098327b595c971b507db24356000fd@54.176.105.93:26656,8a8944fcaddb46ff18ec59a3197af1c5763eb824@50.18.50.100:26656,7ece43f437d4dc419bdf9c09604ebed084699779@54.215.2.221:26656"\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pex")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," to enable the peer exchange. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"pex = true"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prometheus")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," to enable the Prometheus metrics. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"prometheus = true"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max_open_connections")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"li"},"100"),". Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"max_open_connections = 100"),".")),(0,a.kt)("p",null,"Save the changes in ",(0,a.kt)("inlineCode",{parentName:"p"},"config.toml"),"."),(0,a.kt)("p",null,"Open for editing ",(0,a.kt)("inlineCode",{parentName:"p"},"vim ~/.deliveryd/config/delivery-config.toml"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"delivery-config.toml"),", change the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"eth_rpc_url"),": Ethereum network rpc address. You need to generate INFURA_KEY yourself in order to communicate with Ethereum. ",(0,a.kt)("a",{parentName:"li",href:"https://ethereumico.io/knowledge-base/infura-api-key-guide"},"API_KEY Application Tutorial")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_rpc_url"),": RPC address of TRON network node. choose from ",(0,a.kt)("a",{parentName:"li",href:"https://developers.tron.network/docs/official-public-node"},"official-public-node")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_grid_url"),": TRON Network event service query url."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bsc_rpc_url"),": RPC address of BSC network node.",(0,a.kt)("a",{parentName:"li",href:"https://docs.binance.org/smart-chain/developer/rpc.html"},"official-rpc-node")," "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"checkpoint_poll_interval"),": checkpoint poll interval.please set this param to ",(0,a.kt)("inlineCode",{parentName:"li"},"30m0s"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example(mainnet):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'vim ~/.deliveryd/config/delivery-config.toml\n  \neth_rpc_url = "https://mainnet.infura.io/v3/<YOUR_INFURA_KEY>" \nbsc_rpc_url = "https://bsc-dataseed.binance.org/" \ntron_rpc_url = "grpc.trongrid.io:50051" \ntron_grid_url = "https://api.trongrid.io"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example(testnet-1029):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'vim ~/.deliveryd/config/delivery-config.toml\n  \neth_rpc_url = "https://goerli.infura.io/v3/<YOUR_INFURA_KEY>" \nbsc_rpc_url = "https://data-seed-prebsc-1-s1.binance.org:8545/"\ntron_rpc_url = "grpc.nile.trongrid.io:50051" \ntron_grid_url = "https://nile.trongrid.io"\n')),(0,a.kt)("h4",{id:"configure-the-bttc-service"},"Configure the Bttc Service"),(0,a.kt)("p",null,"Open for editing ",(0,a.kt)("inlineCode",{parentName:"p"},"vi ~/node/bttc/start.sh"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"start.sh"),", add the boot node addresses consisting of a node ID, an IP address, and a port by adding the following line at the end:"),(0,a.kt)("p",null,"mainnet Configure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-config"},'--bootnodes \n"enode://8ef920be1d44ad7c41a517a6420e43511f2e30d1c35a4bb05954c9f413b1712dae6e9e05f56595966470506891ff05d203e233c2e8f6df8c72621537a3d783e9@54.157.35.210:30303,enode://f3a2534ac30db7387f84c1262bce9a0737c46a8b5627f8193d412a4bde415c191191bbf984f51e04e5d974e62b70fab148f38522c5e2917ca1f1860361f14cc9@107.20.250.182:30303,enode://268cc5c4062b4c30f7ae972322ec119465655d9b3f7220df4614f2890b5cef6ac350d65890f8ecebfe6c5ce0af635f7ae420db84de7677c54b35ed1ce6bb4fbd@54.219.27.155:30303,enode://a9aa7a7ec5b34485c73436d311d86c55f900db4008058231a2fd2fb8ee7ad1b68d7d5a64acbf1f62b8d5f25388b492d16befb686d6146b374a85a6ea7d5a95c9@54.241.235.101:30303"\n')),(0,a.kt)("p",null,"Testnet-1029 Configure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-config"},'--bootnodes "enode://2e6a732ba9d0fcf102a4f4bda7d76f28095c9f03ee56bc89dc5c2235cd527c914b6063b0c76598cc37287f0594ae4022df550c592b3ba2a56a9f02810edbeee1@52.53.72.234:30303,enode://3d7da6d583072fbbe733135047010698e8b6a24c9315ce953b09dddbfabb2476c8b720b2ff2beb2ec73ef111b691c7dcd87f5e42bcba4a7bc385b7f728b2ab44@54.176.105.93:30303"\n')),(0,a.kt)("p",null,"Save the changes in ",(0,a.kt)("inlineCode",{parentName:"p"},"start.sh"),"."),(0,a.kt)("h4",{id:"configure-firewall"},"Configure firewall"),(0,a.kt)("p",null,"The full machine must have the following ports open to the world ",(0,a.kt)("inlineCode",{parentName:"p"},"0.0.0.0/0"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"26656- Your Delivery service will connect your node to other nodes Delivery service."),(0,a.kt)("li",{parentName:"ul"},"30303- Your Bttc service will connect your node to other nodes Bttc service."),(0,a.kt)("li",{parentName:"ul"},"22- For the fullnode to be able to ssh from wherever he/she is.")),(0,a.kt)("h3",{id:"start-the-full-node"},"Start the full node"),(0,a.kt)("p",null,"You will first start the Delivery service. Once the Delivery service syncs, you will start the Bttc service."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Note\uff1aThe Delivery service takes several hours to fully sync from scratch.")),(0,a.kt)("h4",{id:"start-the-delivery-service"},"Start the Delivery service"),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/node/delivery")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd ~/node/delivery\n")),(0,a.kt)("p",null,"Start the Delivery service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash delivery-start.sh\n")),(0,a.kt)("p",null,"Start the Delivery rest-server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash delivery-server-start.sh \n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note\uff1a"),(0,a.kt)("p",{parentName:"blockquote"},"In the logs, you may see the following errors:"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Stopping peer for error")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MConnection flush failed")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"use of closed network connection"))),(0,a.kt)("p",{parentName:"blockquote"},"These mean that one of the nodes on the network refused a connection to your node. You do not need to do anything with these errors. Wait for your node to crawl more nodes on the network."),(0,a.kt)("p",{parentName:"blockquote"},"Check the sync status of Delivery:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl localhost:26657/status\n")),(0,a.kt)("p",null,"In the output, the ",(0,a.kt)("inlineCode",{parentName:"p"},"catching_up")," value is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"true")," \u2014 the Delivery service is syncing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"false")," \u2014 the Delivery service is fully synced.")),(0,a.kt)("p",null,"Wait for the Delivery service to fully sync."),(0,a.kt)("h4",{id:"start-the-bttc-service"},"Start the Bttc service"),(0,a.kt)("p",null,"Once the Delivery service is fully synced, start the Bttc service."),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/node/bttc")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd ~/node/bttc\n")),(0,a.kt)("p",null,"Start the Bttc service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash start.sh\n")))}p.isMDXComponent=!0}}]);