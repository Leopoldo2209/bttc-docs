"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6438],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6404:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={},o="Quick Migration Guide for Ethereum DApp",s={unversionedId:"tutorial/quick-migration-guide-for-ethereum-dApp",id:"tutorial/quick-migration-guide-for-ethereum-dApp",title:"Quick Migration Guide for Ethereum DApp",description:"In order to help developers migrating Ethereum DApp to BTTC network in an easier way, we will take Uniswap as an example, introduce how to migrate both DApp contracts and the frontend UI using the Ethereum IDE - Remix.",source:"@site/docs/tutorial/quick-migration-guide-for-ethereum-dApp.md",sourceDirName:"tutorial",slug:"/tutorial/quick-migration-guide-for-ethereum-dApp",permalink:"/docs/tutorial/quick-migration-guide-for-ethereum-dApp",draft:!1,editUrl:"https://github.com/bttcprotocol/bttc-docs/tree/master/docs/tutorial/quick-migration-guide-for-ethereum-dApp.md",tags:[],version:"current",lastUpdatedAt:1724138736,formattedLastUpdatedAt:"Aug 20, 2024",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Build a Web3 App On BTTC",permalink:"/docs/tutorial/build-web3-app"},next:{title:"Wallet",permalink:"/docs/wallet"}},l={},c=[{value:"Differences between BTTC and Ethereum",id:"differences-between-bttc-and-ethereum",level:2},{value:"The overall guideline for the migration",id:"the-overall-guideline-for-the-migration",level:2},{value:"Uniswap Migration",id:"uniswap-migration",level:2},{value:"Uniswap business process",id:"uniswap-business-process",level:3},{value:"Uniswap contract migration",id:"uniswap-contract-migration",level:3},{value:"Prerequisites",id:"prerequisites",level:4},{value:"Use online IDE Remix",id:"use-online-ide-remix",level:4},{value:"Modify Uniswap dependency library",id:"modify-uniswap-dependency-library",level:3},{value:"Modify location: src/constants.ts",id:"modify-location-srcconstantsts",level:4},{value:"Modify src/entities/token.ts",id:"modify-srcentitiestokents",level:4},{value:"Modify Uniswap frontend code",id:"modify-uniswap-frontend-code",level:3},{value:"Modifiy src/connectors/index.ts",id:"modifiy-srcconnectorsindexts",level:4},{value:"Modify src/constants/index.ts",id:"modify-srcconstantsindexts",level:4},{value:"Modify src/constants/multicall/index.ts",id:"modify-srcconstantsmulticallindexts",level:4},{value:"Modify src/constants/list.ts",id:"modify-srcconstantslistts",level:4},{value:"Test",id:"test",level:4},{value:"Summary of Uniswap migration",id:"summary-of-uniswap-migration",level:3},{value:"Summary of DAPP Migration",id:"summary-of-dapp-migration",level:2}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-migration-guide-for-ethereum-dapp"},"Quick Migration Guide for Ethereum DApp"),(0,i.kt)("p",null,"In order to help developers migrating Ethereum DApp to BTTC network in an easier way, we will take ",(0,i.kt)("em",{parentName:"p"},"Uniswap")," as an example, introduce how to migrate both DApp contracts and the frontend UI using the Ethereum IDE - Remix."),(0,i.kt)("h2",{id:"differences-between-bttc-and-ethereum"},"Differences between BTTC and Ethereum"),(0,i.kt)("p",null,"The basic layer of BTTC network is compatible with EVM, which reduces the workload of migration for DApp developers, the whole process will be smooth as well. However, there are some differences we need to pay attention to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Token unit\uff1aBTTC uses BTT to replace wei and ether in Ethereum"),(0,i.kt)("li",{parentName:"ul"},"Account address format: BTTC uses the same format as Ethereum's"),(0,i.kt)("li",{parentName:"ul"},"For RPC please refer to this documentation: ",(0,i.kt)("a",{parentName:"li",href:"https://doc.bt.io/docs/networks/network"},"network"))),(0,i.kt)("h2",{id:"the-overall-guideline-for-the-migration"},"The overall guideline for the migration"),(0,i.kt)("p",null,"Please refer to the following steps to migrate the DApp:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Evaluate the primary function of the DApp, order them with the dependencies between each function.For Uniswap, the dependencies will be:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("a",{parentName:"li",href:"https://doc.bt.io/docs/networks/network"},"BTTC network config")," in MetaMask"),(0,i.kt)("li",{parentName:"ul"},"Connect with MetaMask wallet"),(0,i.kt)("li",{parentName:"ul"},"Show tokens and balance on the swap UI"),(0,i.kt)("li",{parentName:"ul"},"Create trading pairs and add liquidity"),(0,i.kt)("li",{parentName:"ul"},"Ability to swap"),(0,i.kt)("li",{parentName:"ul"},"Ability to remove liquidity")),(0,i.kt)("p",{parentName:"li"},"To add BTTC Donau testnet in MetaMask:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Network Name:BTTC Donau Testnet"),(0,i.kt)("li",{parentName:"ul"},"RPC URL: ",(0,i.kt)("a",{parentName:"li",href:"https://pre-rpc.bt.io/"},"https://pre-rpc.bt.io/")),(0,i.kt)("li",{parentName:"ul"},"ChainID:1029"),(0,i.kt)("li",{parentName:"ul"},"Symbol(optional):BTT"),(0,i.kt)("li",{parentName:"ul"},"Block Explorer: ",(0,i.kt)("a",{parentName:"li",href:"https://testscan.bt.io"},"https://testscan.bt.io")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Migrate DApp contracts based on chapter ",(0,i.kt)("a",{parentName:"p",href:"#Uniswap-contract-migration"},"Uniswap contract migration"),", deploy to the BTTC testnet.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"According to the functional dependencies from step 1 and the section about ",(0,i.kt)("a",{parentName:"p",href:"#Modify-Uniswap-frontend-code"},"Modify Uniswap frontend code"),", debug each function one by one."))),(0,i.kt)("h2",{id:"uniswap-migration"},"Uniswap Migration"),(0,i.kt)("p",null,"In order to better help developers migrate the Ethereum DAPP to BTTC network, we will use Uniswap as an example and show you the migration process along with the conversion points. Uniswap has elaborated business process and certain complexity compared with other DApps, therefore, Uniswap will be a good representative for DApp migration."),(0,i.kt)("h3",{id:"uniswap-business-process"},"Uniswap business process"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Connect MetaMask wallet, select an account and link, then the Uniswap frontend will display the account linked and the native token balance."),(0,i.kt)("li",{parentName:"ul"},"On the swap page, click and select tokens to check the balance of different tokens."),(0,i.kt)("li",{parentName:"ul"},"On the pool UI, you can create trading pairs and add liquidity, you might need to wake up the MetaMask wallet, grant consent and sign. The newly created trading pair and liquidity will be displayed on the page after authorization. Click the ",(0,i.kt)("em",{parentName:"li"},"remove")," button can remove liquidity by specified percentage."),(0,i.kt)("li",{parentName:"ul"},"Switch back to swap UI to swap the tokens with the trading pairs you just created, will require MetaMask signature.")),(0,i.kt)("h3",{id:"uniswap-contract-migration"},"Uniswap contract migration"),(0,i.kt)("p",null,"Uniswap contracts code please refer to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/treelaketreelake/swap-contracts"},"swap-contracts"),". Below is the deployment in details."),(0,i.kt)("h4",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Install MetaMask wallet and add BTTC network, please refer to this doc's ",(0,i.kt)("a",{parentName:"li",href:"https://doc.bt.io/docs/wallet#metamask"},"wallet")," chapter."),(0,i.kt)("li",{parentName:"ol"},"We will use ",(0,i.kt)("strong",{parentName:"li"},"BTTC Donau testnet"),", test token can be obtained from the ",(0,i.kt)("a",{parentName:"li",href:"https://testfaucet.bt.io/#/"},"faucet"),".")),(0,i.kt)("h4",{id:"use-online-ide-remix"},"Use online IDE Remix"),(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"RemixIDE")," to deploy contract please see ",(0,i.kt)("a",{parentName:"p",href:"https://doc.bt.io/docs/smartcontract/deploy-contracts"},"Deploy contract with Remix")," doc. Among others\uff0cplease mainly deploy these Uniswap trading pair contracts listed as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"uniswapV2Factory"),(0,i.kt)("li",{parentName:"ul"},"WETH"),(0,i.kt)("li",{parentName:"ul"},"Multicall"),(0,i.kt)("li",{parentName:"ul"},"uniswapV2Router02"),(0,i.kt)("li",{parentName:"ul"},"ERC20A\uff0cERC20B\uff08test token\uff09")),(0,i.kt)("p",null,"Compile related contracts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Compile uniswapV2Factory contract"),(0,i.kt)("li",{parentName:"ul"},"Compile WETH contract"),(0,i.kt)("li",{parentName:"ul"},"Compile uniswapV2Router02 contract"),(0,i.kt)("li",{parentName:"ul"},"Compile ERC20A/ERC20B contract")),(0,i.kt)("p",null,"Deploy aforementioned contracts to BTTC Donau testnet. In RemixIDE's ENVIRONMENT,select ",(0,i.kt)("em",{parentName:"p"},"Injected Provider - MetaMask"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deploy uniswapV2Factory contract\uff0cthe feeToSettter value is the contract deployer.\n",(0,i.kt)("img",{src:a(9614).Z,width:"2760",height:"1310"}))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Deploy WETH contract\n",(0,i.kt)("img",{src:a(9245).Z,width:"2746",height:"1240"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Deploy Muticall contract\n",(0,i.kt)("img",{src:a(2756).Z,width:"2720",height:"1294"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Deploy uniswapV2Router02 contract\n",(0,i.kt)("strong",{parentName:"p"},"First get initCode"),": Compile UniswapV2Pair contract, get pair bytecode\uff0cthen get the object field content\uff0copen ",(0,i.kt)("a",{parentName:"p",href:"http://emn178.github.io/online-tools/keccak_256.html"},"keccak 256 tool"),"\uff0cpaste the object field, select input type HEX, then got the initCode as the following picture.\n",(0,i.kt)("img",{src:a(2229).Z,width:"1412",height:"1212"}),"\nReplace uniswapV2Router02 contract's initCode\n",(0,i.kt)("img",{src:a(1880).Z,width:"1756",height:"1172"}),"\nLastly, deploy uniswapV2Router02 contract\n",(0,i.kt)("img",{src:a(5483).Z,width:"2680",height:"1288"})))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Deploy ERC20A/ERC20B contract\n",(0,i.kt)("img",{src:a(9923).Z,width:"2508",height:"1288"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Recode the contract address after the deployment"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"uniswapV2Factory at: 0x156a06c0e2e248f1904d0c089ad7b8f557f5bd1f\nWETH at: 0x2e1a6ed102fa50a6c9027c9c031245ec157010ed\nuniswapV2Router02 at: 0x49d769b538921525d74ed87445c9a079f82548ee\nMulticall at:0x59bc158d32033138e454604c03d4c9b1a1befa44\ninitHash at: 0x1a6d2ed3e4401e99398dc98ed6292bad49c7e0760d0026a54c1c7597c227373b\nERC20A at:0xf426e0995542bf01a07b97d9f8dcd684ccce005e\nERC20B at: 0x734f54b414d63b788aff5aef1dbc9616cf8d8a9a\n")))),(0,i.kt)("h3",{id:"modify-uniswap-dependency-library"},"Modify Uniswap dependency library"),(0,i.kt)("p",null,"Package name: uniswap-sdk\nSource code in GitHub: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/v2-sdk/tree/a88048e9c4198a5bdaea00883ca00c8c8e582605"},"Uniswap")),(0,i.kt)("h4",{id:"modify-location-srcconstantsts"},"Modify location: src/constants.ts"),(0,i.kt)("p",null,"First replace the ",(0,i.kt)("em",{parentName:"p"},"FACTORY_ADDRESS")," and ",(0,i.kt)("em",{parentName:"p"},"INIT_CODE_HASH")," to the new data, then add BTTC Donau testnet in chainID enum."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"export const FACTORY_ADDRESS='0x156a06c0e2e248f1904d0c089ad7b8f557f5bd1f'\nexport const INIT_CODE_HASH='0x1a6d2ed3e4401e99398dc98ed6292bad49c7e0760d0026a54c1c7597c227373b'\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  G\xd6RLI = 5,\n  KOVAN = 42,\n  BTTC =1029\n}\n")),(0,i.kt)("h4",{id:"modify-srcentitiestokents"},"Modify src/entities/token.ts"),(0,i.kt)("p",null,"Change below address to the newly generated WETH token address (WETH at). After the alternation compile and get the new ",(0,i.kt)("em",{parentName:"p"},"dist")," directory, replace the old one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"export const WETH = {\n[ChainId.BTTC]: new Token(\n  ChainId.BTTC,\n  '0x2e1a6ed102fa50a6c9027c9c031245ec157010ed',\n  18,\n  'WETH',\n  'Wrapped ETH'\n),,\n")),(0,i.kt)("h3",{id:"modify-uniswap-frontend-code"},"Modify Uniswap frontend code"),(0,i.kt)("p",null,"\u26a0\ufe0f Note: Currently Uniswap has many frontend versions, there are differences between each version, we will use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Uniswap/interface/tree/v2.6.0"},"uniswap-interface-2.6.0")," in this guide."),(0,i.kt)("h4",{id:"modifiy-srcconnectorsindexts"},"Modifiy src/connectors/index.ts"),(0,i.kt)("p",null,"Add BTTC Donau testnet chainID in supportedChainIds."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"export const injected = new InjectedConnector({\nsupportedChainIds: [1, 3, 4, 5, 42,1029]\n})\n")),(0,i.kt)("h4",{id:"modify-srcconstantsindexts"},"Modify src/constants/index.ts"),(0,i.kt)("p",null,"Replace ROUTER_ADDRESS to the newly generated router contract address."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"export const ROUTER_ADDRESS = '0x49d769b538921525d74ed87445c9a079f82548ee'\n")),(0,i.kt)("h4",{id:"modify-srcconstantsmulticallindexts"},"Modify src/constants/multicall/index.ts"),(0,i.kt)("p",null,"Add BTTC Donau testnet and it's multicall contract address in MULTICALL_NETWORKS."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"[ChainId.BTTC]:'0x59bc158d32033138e454604c03d4c9b1a1befa44'\n")),(0,i.kt)("h4",{id:"modify-srcconstantslistts"},"Modify src/constants/list.ts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"exportconstDEFAULT_TOKEN_LIST_URL='http://yourIP/token-list.json'\n")),(0,i.kt)("h4",{id:"test"},"Test"),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn start"),", start the testing process."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(5503).Z,width:"2770",height:"1580"})),(0,i.kt)("h3",{id:"summary-of-uniswap-migration"},"Summary of Uniswap migration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add BTTC Donau testnet network configuration in swap source code and denpendency library @uniswap/sdk, let the app support the BTTC testnet with chainID ",(0,i.kt)("inlineCode",{parentName:"li"},"1029"),"."),(0,i.kt)("li",{parentName:"ul"},"Modify business related dependency contract ",(0,i.kt)("inlineCode",{parentName:"li"},"UniswapV2Library"),"'s ",(0,i.kt)("inlineCode",{parentName:"li"},"init code hash")," then deploy the corresponding contract of business logic (uniswapV2Factory/WETH/uniswapV2Router/multicall), obtain the contract address."),(0,i.kt)("li",{parentName:"ul"},"Replace the contract address in swap source code (uniswapV2Factory/WETH/uniswapV2Router/multicall/initHash)"),(0,i.kt)("li",{parentName:"ul"},"And in @uniswap/sdk (uniswapV2Factory/WETH/uniswapV2Router/multicall/initHash)\u3002")),(0,i.kt)("h2",{id:"summary-of-dapp-migration"},"Summary of DAPP Migration"),(0,i.kt)("p",null,"We use Uniswap's migration as an example, the main ajustments are required by the business logic. Such as supporting new network or change to the new contract address. Therefore, before the final migration, it is vital to sort out the business logic, what's following will be smooth."))}d.isMDXComponent=!0},9614:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp1-a55134c77481bfc75e6678023b334c33.png"},9245:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp2-b2602fd9de59e78c0d0e321aabb02d23.png"},2756:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp3-8bded8568eeaf604cd82a6b0c0cb51ff.png"},2229:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp4-c5fe9668abab45cff25501c38e089bcc.png"},1880:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp5-a2f91525d6aa96cedd7d950c97e93cd7.png"},5483:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp6-7c4aecbef5b54acb5704c3c429375491.png"},9923:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp7-2010c16b71833c29882f468ce5021744.png"},5503:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick_migration_guide_for_ethereum_dApp8-71a33a8fb27df8de0f0d2706131e4c01.png"}}]);