"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(d,".").concat(h)]||u[h]||c[h]||l;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={},i="Validator Node Deployment",o={unversionedId:"validator/build-validator-node",id:"validator/build-validator-node",title:"Validator Node Deployment",description:"System requirements",source:"@site/docs/validator/build-validator-node.md",sourceDirName:"validator",slug:"/validator/build-validator-node",permalink:"/docs/validator/build-validator-node",draft:!1,editUrl:"https://github.com/bttcprotocol/bttc-docs/tree/master/docs/validator/build-validator-node.md",tags:[],version:"current",lastUpdatedAt:1724138736,formattedLastUpdatedAt:"Aug 20, 2024",frontMatter:{},sidebar:"validatorSidebar",previous:{title:"State Sync Mechanism",permalink:"/docs/validator/core-components/state-sync-mechanism"},next:{title:"Delivery and Bttc Snapshots",permalink:"/docs/node/snapshot"}},d={},p=[{value:"System requirements",id:"system-requirements",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Install Delivery and Bttc binaries",id:"install-delivery-and-bttc-binaries",level:2},{value:"Install Delivery",id:"install-delivery",level:3},{value:"Install Bttc",id:"install-bttc",level:3},{value:"Set up node files",id:"set-up-node-files",level:2},{value:"Fetch the launch repository",id:"fetch-the-launch-repository",level:3},{value:"Set up the launch directory",id:"set-up-the-launch-directory",level:3},{value:"Set up the network directories",id:"set-up-the-network-directories",level:3},{value:"Configure the sentry Nodes",id:"configure-the-sentry-nodes",level:2},{value:"Configure the Delivery services",id:"configure-the-delivery-services",level:3},{value:"Configure the Bttc Service",id:"configure-the-bttc-service",level:3},{value:"Configure firewall",id:"configure-firewall",level:3},{value:"Start the sentry node",id:"start-the-sentry-node",level:2},{value:"Start the Delivery service",id:"start-the-delivery-service",level:3},{value:"Start the Bttc service",id:"start-the-bttc-service",level:3},{value:"Configure the validator node",id:"configure-the-validator-node",level:2},{value:"Configure the Delivery service",id:"configure-the-delivery-service",level:3},{value:"Configure the Bttc service",id:"configure-the-bttc-service-1",level:3},{value:"Set the signer key",id:"set-the-signer-key",level:2},{value:"Configuring Delivery with the Signer Private Key",id:"configuring-delivery-with-the-signer-private-key",level:3},{value:"Configuring BTTC with the Signer Private Key",id:"configuring-bttc-with-the-signer-private-key",level:3},{value:"Add password.txt",id:"add-passwordtxt",level:3},{value:"Add your Ethereum address",id:"add-your-ethereum-address",level:3},{value:"Start the validator node",id:"start-the-validator-node",level:2},{value:"Start the Delivery service",id:"start-the-delivery-service-1",level:3},{value:"Start the Bttc service",id:"start-the-bttc-service-1",level:3}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validator-node-deployment"},"Validator Node Deployment"),(0,a.kt)("h2",{id:"system-requirements"},"System requirements"),(0,a.kt)("p",null,"This document lists the minimum system requirements and recommended system requirements for running the Sentry Node and the Validator Node, which must be run on different machines."),(0,a.kt)("p",null,"Minimum system requirements for Sentinel Node and Validator Node\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RAM: 32 GB"),(0,a.kt)("li",{parentName:"ul"},"CPU: 8-core"),(0,a.kt)("li",{parentName:"ul"},"Storage: 1 TB SSD")),(0,a.kt)("p",null,"For Amazon Web Services (AWS), the equivalent of the minimum requirements instances are ",(0,a.kt)("strong",{parentName:"p"},"m5d.2xlarge")," or ",(0,a.kt)("strong",{parentName:"p"},"t3.2xlarge")," with unlimited credits selected."),(0,a.kt)("p",null,"Recommended system requirements for Sentinel Node and Validator Node\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RAM\uff1a64GB"),(0,a.kt)("li",{parentName:"ul"},"CPU: 16-core"),(0,a.kt)("li",{parentName:"ul"},"Storage: 1TB SSD"),(0,a.kt)("li",{parentName:"ul"},"Bandwidth: 1 Gbit/s")),(0,a.kt)("p",null,"For Amazon Web Services (AWS), the equivalent of the recommended requirements instance is ",(0,a.kt)("strong",{parentName:"p"},"m5d.4xlarge"),"."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Two machines \u2014 one sentry node and one validator node.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"build-essential")," installed on both the sentry and the validator machines(optional).\nTo install(only required in ubuntu):"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt-get install build-essential\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Go 1.17 installed on both the sentry and the validator machines.\nTo install:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wget https://gist.githubusercontent.com/ssandeep/a6c7197811c83c71e5fead841bab396c/raw/go-install.sh\nbash go-install.sh\nsudo ln -nfs ~/.go/bin/go /usr/bin/go\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"RabbitMQ installed on both the sentry and the validator machines. See ",(0,a.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/download.html"},"Downloading and Installing RabbitMQ"),"."))),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"To get to a running validator node, do the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"1. Have the two machines prepared.\n2. Install the Delivery and Bttc binaries on the sentry and the validator machines.\n3. Set up the Delivery and Bttc service files on the sentry and the validator machines.\n4. Set up the Delivery and Bttc services on the sentry and the validator machines.\n5. Configure the sentry node.\n6. Start the sentry node.\n7. Configure the validator node.\n8. Set the owner and signer keys.\n9. Start the validator node.\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note\uff1a You must follow the exact outlined sequence of actions, otherwise you will run into issues.For example, a sentry node must always be set up before the validator node.")),(0,a.kt)("h2",{id:"install-delivery-and-bttc-binaries"},"Install Delivery and Bttc binaries"),(0,a.kt)("h3",{id:"install-delivery"},"Install Delivery"),(0,a.kt)("p",null,"Clone ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/delivery/"},"Delivery repository"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/bttcprotocol/delivery\n")),(0,a.kt)("p",null,"Check out the correct ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/delivery/releases"},"release version"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git checkout RELEASE_TAG\n")),(0,a.kt)("p",null,"where"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RELEASE_TAG \u2014 the tag of the release version that you install.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"make install\n")),(0,a.kt)("p",null,"Check the installation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"deliveryd version --long\n")),(0,a.kt)("h3",{id:"install-bttc"},"Install Bttc"),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/bttc"},"Bttc repository"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/bttcprotocol/bttc\n")),(0,a.kt)("p",null,"Check out the correct ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bttcprotocol/bttc/releases"},"release version"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git checkout RELEASE_TAG\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RELEASE_TAG \u2014 the tag of the release version that you install. Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout v1.0.1\n")),(0,a.kt)("p",null,"Install Bttc:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"make bttc-all\n")),(0,a.kt)("p",null,"Create symlinks::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo ln -nfs ~/bttc/build/bin/bttc /usr/bin/bttc\nsudo ln -nfs ~/bttc/build/bin/bootnode /usr/bin/bootnode\n")),(0,a.kt)("p",null,"Check the installation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bttc version\n")),(0,a.kt)("h2",{id:"set-up-node-files"},"Set up node files"),(0,a.kt)("h3",{id:"fetch-the-launch-repository"},"Fetch the launch repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/bttcprotocol/launch\n")),(0,a.kt)("h3",{id:"set-up-the-launch-directory"},"Set up the launch directory"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1.Set up a startup directory on the Sentinel node")," Create ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p node\n")),(0,a.kt)("p",null,"Copy the files and scripts from the ",(0,a.kt)("inlineCode",{parentName:"p"},"launch")," directory to the ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory, selecting the correct folder. For access to the mainnet, select mainnet-v1; for access to the test network, select testnet-1029."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cp -rf launch/mainnet-v1/sentry/sentry/* ~/node\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2.Set up the activation menu on the verifier node")),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir -p node\n")),(0,a.kt)("p",null,"Copy files and scripts from the ",(0,a.kt)("inlineCode",{parentName:"p"},"launch")," directory to the ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cp -rf launch/mainnet-v1/sentry/validator/* ~/node\n")),(0,a.kt)("h3",{id:"set-up-the-network-directories"},"Set up the network directories"),(0,a.kt)("p",null,"Run this section on the Sentinel node and the Verifier node respectively."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1.Set up Delivery")),(0,a.kt)("p",null,"Switch to the ",(0,a.kt)("inlineCode",{parentName:"p"},"delivery")," directory and run the setup script::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd ~/node/delivery\nbash setup.sh\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2.Set up Bttc")),(0,a.kt)("p",null,"Switch to the ",(0,a.kt)("inlineCode",{parentName:"p"},"bttc")," directory and run the setup script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bash setup.sh\n")),(0,a.kt)("h2",{id:"configure-the-sentry-nodes"},"Configure the sentry Nodes"),(0,a.kt)("h3",{id:"configure-the-delivery-services"},"Configure the Delivery services"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"open",(0,a.kt)("inlineCode",{parentName:"strong"},"vim ~/.deliveryd/config/config.toml"),"\uff0cIn ",(0,a.kt)("inlineCode",{parentName:"strong"},"config.toml"),", change the following:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"moniker")," \u2014 any name. Example: ",(0,a.kt)("inlineCode",{parentName:"p"},'moniker = "my-sentry-node"'),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"seeds")," \u2014 the seed node addresses consisting of a node ID, an IP address, and a port.\nUse the following values from ~/node/delivery/delivery-seeds.txt:\nExample(mainnet):"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'seeds="161c2cbe07fccc8c8a3b10ccdea608569a202c06@54.157.35.210:26656,f3f21c82c04003e3c6ee14eb4d11d5dd0b1f201e@107.20.250.182:26656,ed080edbac1a1a285d265e3e87269aea9f6693b7@54.219.27.155:26656,3114d9ebc7254a27de7092b071bd698d250748aa@54.241.235.101:26656"\n')),(0,a.kt)("p",{parentName:"li"},"Example(testnet-1029):"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'seeds="3f562eed0fcfabc848db5ebed81633e340352c0c@52.53.72.234:26656,65f774fece098327b595c971b507db24356000fd@54.176.105.93:26656,8a8944fcaddb46ff18ec59a3197af1c5763eb824@50.18.50.100:26656,7ece43f437d4dc419bdf9c09604ebed084699779@54.215.2.221:26656"\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"pex")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," to enable the peer exchange. Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"pex = true"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"private_peer_ids")," \u2014 the node ID of Delivery set up on the validator machine.\nTo get the node ID of Delivery on the validator machine:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Login to the valdator machine."),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"deliveryd tendermint show-node-id"),".")),(0,a.kt)("p",{parentName:"li"},"Example: ",(0,a.kt)("inlineCode",{parentName:"p"},'private_peer_ids = "e2c6a611e449b61f2266f0054a315fad6ce607ba"'),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"prometheus")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," to enable the Prometheus metrics. Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"prometheus = true"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"max_open_connections")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"p"},"100"),". Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"max_open_connections = 100"),"."))),(0,a.kt)("p",null,"Save the changes in ",(0,a.kt)("inlineCode",{parentName:"p"},"config.toml"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Open ",(0,a.kt)("inlineCode",{parentName:"strong"},"vim ~/.deliveryd/config/delivery-config.toml"),"\uff0cIn ",(0,a.kt)("inlineCode",{parentName:"strong"},"delivery-config.toml"),", change the following:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"eth_rpc_url"),": Ethereum network rpc address. You need to generate INFURA_KEY yourself in order to communicate with Ethereum. ",(0,a.kt)("a",{parentName:"li",href:"https://ethereumico.io/knowledge-base/infura-api-key-guide"},"API_KEY Application Tutorial")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_rpc_url"),": RPC address of TRON network node. choose from ",(0,a.kt)("a",{parentName:"li",href:"https://developers.tron.network/docs/official-public-node"},"official-public-node")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_grid_url"),": TRON Network event service query url."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_grid_api_key"),": Tron Grid Api Key . You need to generate tron_grid_api_key yourself in order to communicate with Trongrid. ",(0,a.kt)("a",{parentName:"li",href:"https://developers.tron.network/reference/select-network"},"Tron_grid_api_key Tutorial"),". Specially, in testnet-1029  you needn't tron_grid_api_key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bsc_rpc_url"),": RPC address of BSC network node.",(0,a.kt)("a",{parentName:"li",href:"https://docs.binance.org/smart-chain/developer/rpc.html"},"official-rpc-node")," "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"checkpoint_poll_interval"),": checkpoint poll interval.please set this param to ",(0,a.kt)("inlineCode",{parentName:"li"},"30m0s"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example(mainnet):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'vim ~/.deliveryd/config/delivery-config.toml\n  \neth_rpc_url = "https://mainnet.infura.io/v3/<YOUR_INFURA_KEY>" \nbsc_rpc_url = "https://bsc-dataseed.binance.org/" \ntron_rpc_url = "grpc.trongrid.io:50051" \ntron_grid_url = "https://api.trongrid.io"\ntron_grid_api_key = "<YOUR_TRON_GRID_API_KEY>"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example(testnet-1029):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'vim ~/.deliveryd/config/delivery-config.toml\n  \neth_rpc_url = "https://goerli.infura.io/v3/<YOUR_INFURA_KEY>" \nbsc_rpc_url = "https://data-seed-prebsc-1-s1.binance.org:8545/"\ntron_rpc_url = "grpc.nile.trongrid.io:50051" \ntron_grid_url = "https://nile.trongrid.io"\ntron_grid_api_key = "xxxxxxxx"\n')),(0,a.kt)("h3",{id:"configure-the-bttc-service"},"Configure the Bttc Service"),(0,a.kt)("p",null,"Open ",(0,a.kt)("inlineCode",{parentName:"p"},"vi ~/node/bttc/start.sh"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"start.sh"),", add the boot node addresses consisting of a node ID, an IP address, and a port by adding the following line at the end:"),(0,a.kt)("p",null,"Mainnet Configure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'--bootnodes \n"enode://8ef920be1d44ad7c41a517a6420e43511f2e30d1c35a4bb05954c9f413b1712dae6e9e05f56595966470506891ff05d203e233c2e8f6df8c72621537a3d783e9@54.157.35.210:30303,enode://f3a2534ac30db7387f84c1262bce9a0737c46a8b5627f8193d412a4bde415c191191bbf984f51e04e5d974e62b70fab148f38522c5e2917ca1f1860361f14cc9@107.20.250.182:30303,enode://268cc5c4062b4c30f7ae972322ec119465655d9b3f7220df4614f2890b5cef6ac350d65890f8ecebfe6c5ce0af635f7ae420db84de7677c54b35ed1ce6bb4fbd@54.219.27.155:30303,enode://a9aa7a7ec5b34485c73436d311d86c55f900db4008058231a2fd2fb8ee7ad1b68d7d5a64acbf1f62b8d5f25388b492d16befb686d6146b374a85a6ea7d5a95c9@54.241.235.101:30303"\n')),(0,a.kt)("p",null,"Testnet-1029 Configure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'--bootnodes "enode://2e6a732ba9d0fcf102a4f4bda7d76f28095c9f03ee56bc89dc5c2235cd527c914b6063b0c76598cc37287f0594ae4022df550c592b3ba2a56a9f02810edbeee1@52.53.72.234:30303,enode://3d7da6d583072fbbe733135047010698e8b6a24c9315ce953b09dddbfabb2476c8b720b2ff2beb2ec73ef111b691c7dcd87f5e42bcba4a7bc385b7f728b2ab44@54.176.105.93:30303"\n')),(0,a.kt)("p",null,"Save the changes in ",(0,a.kt)("inlineCode",{parentName:"p"},"start.sh"),"."),(0,a.kt)("h3",{id:"configure-firewall"},"Configure firewall"),(0,a.kt)("p",null,"The sentry machine must have the following ports open to the world ",(0,a.kt)("inlineCode",{parentName:"p"},"0.0.0.0/0"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"26656- Your Delivery service will connect your node to other nodes Delivery service."),(0,a.kt)("li",{parentName:"ul"},"30303- Your Bttc service will connect your node to other nodes Bttc service."),(0,a.kt)("li",{parentName:"ul"},"22- For the validator to be able to ssh from wherever he/she is.")),(0,a.kt)("h2",{id:"start-the-sentry-node"},"Start the sentry node"),(0,a.kt)("p",null,"You will first start the Delivery service. Once the Delivery service syncs, you will start the Bttc service."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note\uff1aThe Delivery service takes several hours to fully sync from scratch.\u3002")),(0,a.kt)("h3",{id:"start-the-delivery-service"},"Start the Delivery service"),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/node/delivery")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd ~/node/delivery\nbash delivery-start.sh\n")),(0,a.kt)("p",null,"Start the Delivery rest-server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bash delivery-server-start.sh \n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note\uff1a"),(0,a.kt)("p",{parentName:"blockquote"},"In the logs, you may see the following errors:"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Stopping peer for error")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MConnection flush failed")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"use of closed network connection"))),(0,a.kt)("p",{parentName:"blockquote"},"These mean that one of the nodes on the network refused a connection to your node. You do not need to do anything with these errors. Wait for your node to crawl more nodes on the network.")),(0,a.kt)("p",null,"Check the sync status of Delivery:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl localhost:26657/status\n")),(0,a.kt)("p",null,"In the output, the ",(0,a.kt)("inlineCode",{parentName:"p"},"catching_up")," value is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"true")," \u2014 Delivery service is syncing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"false")," \u2014 Deliveryservice is fully synced.")),(0,a.kt)("p",null,"Wait for the Delivery service to fully sync."),(0,a.kt)("h3",{id:"start-the-bttc-service"},"Start the Bttc service"),(0,a.kt)("p",null,"Once the Delivery service is fully synced, start the Bttc service."),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/node/bttc")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd ~/node/bttc\nbash start.sh\n")),(0,a.kt)("h2",{id:"configure-the-validator-node"},"Configure the validator node"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note:"),(0,a.kt)("p",{parentName:"blockquote"},"To complete this section, you must have an RPC endpoint of your fully synced Ethereum mainnet node ready.")),(0,a.kt)("h3",{id:"configure-the-delivery-service"},"Configure the Delivery service"),(0,a.kt)("p",null,"Login to the remote validator machine."),(0,a.kt)("p",null,"Open for editing ",(0,a.kt)("inlineCode",{parentName:"p"},"vi ~/.deliveryd/config/config.toml"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"config.toml"),", change the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"moniker")," \u2014 any name. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},'moniker = "my-validator-node"'),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pex")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," to disable the peer exchange. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"pex = false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"private_peer_ids")," \u2014 comment out the value to disable it. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},'# private_peer_ids = ""'),".\nTo get the node ID of Delivery on the sentry machine:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Login to the sentry machine."),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"deliveryd tendermint show-node-id"),".")))),(0,a.kt)("p",null,"Example: ",(0,a.kt)("inlineCode",{parentName:"p"},'persistent_peers = "sentry_machineNodeID@sentry_instance_ip:26656"')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"prometheus")," \u2014 set the value to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," to enable the Prometheus metrics. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"prometheus = true"),".\nSave the changes in ",(0,a.kt)("inlineCode",{parentName:"li"},"config.toml"),".\nOpen for editing ",(0,a.kt)("inlineCode",{parentName:"li"},"vim ~/.deliveryd/config/delivery-config.toml"),".")),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"delivery-config.toml"),", change the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"eth_rpc_url"),": Ethereum network rpc address. You need to generate INFURA_KEY yourself in order to communicate with Ethereum. ",(0,a.kt)("a",{parentName:"li",href:"https://ethereumico.io/knowledge-base/infura-api-key-guide"},"API_KEY Application Tutorial")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_rpc_url"),": RPC address of TRON network node. choose from ",(0,a.kt)("a",{parentName:"li",href:"https://developers.tron.network/docs/official-public-node"},"official-public-node")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_grid_url"),": TRON Network event service query url."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tron_grid_api_key"),": Tron Grid Api Key . You need to generate tron_grid_api_key yourself in order to communicate with Trongrid. ",(0,a.kt)("a",{parentName:"li",href:"https://developers.tron.network/reference/select-network"},"Tron_grid_api_key Tutorial"),". Specially, in testnet-1029  you needn't tron_grid_api_key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bsc_rpc_url"),": RPC address of BSC network node.",(0,a.kt)("a",{parentName:"li",href:"https://docs.binance.org/smart-chain/developer/rpc.html"},"official-rpc-node"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example(mainnet):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'vim ~/.deliveryd/config/delivery-config.toml\n  \neth_rpc_url = "https://mainnet.infura.io/v3/<YOUR_INFURA_KEY>" \nbsc_rpc_url = "https://bsc-dataseed.binance.org/" \ntron_rpc_url = "grpc.trongrid.io:50051" \ntron_grid_url = "https://api.trongrid.io"\ntron_grid_api_key = "<YOUR_TRON_GRID_API_KEY>"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example(testnet-1029):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'vim ~/.deliveryd/config/delivery-config.toml\n  \neth_rpc_url = "https://goerli.infura.io/v3/<YOUR_INFURA_KEY>" \nbsc_rpc_url = "https://data-seed-prebsc-1-s1.binance.org:8545/"\ntron_rpc_url = "grpc.nile.trongrid.io:50051" \ntron_grid_url = "https://nile.trongrid.io"\ntron_grid_api_key = "xxxxxxxx"\n')),(0,a.kt)("h3",{id:"configure-the-bttc-service-1"},"Configure the Bttc service"),(0,a.kt)("p",null,"Open for editing ",(0,a.kt)("inlineCode",{parentName:"p"},"vi ~/.bttc/data/bor/static-nodes.json"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"static-nodes.json"),", change the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},'"<replace with enode://sentry_machine_enodeID@sentry_machine_ip:30303>"')," \u2014 the node ID and IP address of Bttc set up on the sentry machine."),(0,a.kt)("p",{parentName:"li"},"To get the node ID of Bttc on the sentry machine:"),(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Login to the sentry machine."),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"bootnode -nodekey ~/.bttc/data/bor/nodekey -writeaddress"),".")),(0,a.kt)("p",{parentName:"li"},"Example: ",(0,a.kt)("inlineCode",{parentName:"p"},'"enode://8ef920be1d44ad7c41a517a6420e43511f2e30d1c35a4bb05954c9f413b1712dae6e9e05f56595966470506891ff05d203e233c2e8f6df8c72621537a3d783e9@54.157.35.210:30303"'),"."))),(0,a.kt)("p",null,"Save the changes in ",(0,a.kt)("inlineCode",{parentName:"p"},"static-nodes.json"),"."),(0,a.kt)("h2",{id:"set-the-signer-key"},"Set the signer key"),(0,a.kt)("p",null,"On Bttc, it is recommended that you keep the owner and signer keys different."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Signer \u2014 the address that signs the checkpoint transactions. The recommendation is to keep at least 2 ETH, 20,000TRX, 0.5BNB on the signer address."),(0,a.kt)("li",{parentName:"ul"},"Owner \u2014 the address that does the staking transactions. The recommendation is to keep the BTT tokens on the owner address.")),(0,a.kt)("h3",{id:"configuring-delivery-with-the-signer-private-key"},"Configuring Delivery with the Signer Private Key"),(0,a.kt)("p",null,"You must set a Delivery private key only on the validator machine. Do not set a Delivery private key on the sentry machine."),(0,a.kt)("p",null,"To set the private key on delivery, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"deliverycli generate-validatorkey ETHEREUM_PRIVATE_KEY\n")),(0,a.kt)("p",null,"where"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ETHEREUM_PRIVATE_KEY \u2014 your signer Ethereum private key.")),(0,a.kt)("p",null,"This will generate ",(0,a.kt)("inlineCode",{parentName:"p"},"priv_validator_key.json"),". Move the generated JSON file to the Delivery configuration directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"mv ./priv_validator_key.json ~/.deliveryd/config\n")),(0,a.kt)("h3",{id:"configuring-bttc-with-the-signer-private-key"},"Configuring BTTC with the Signer Private Key"),(0,a.kt)("p",null,"You must generate a Bttc keystore file with the signer private key only on the validator machine. Do not generate a Bttc keystore file on the sentry machine."),(0,a.kt)("p",null,"To set the private key on bttc, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"deliverycli generate-keystore ETHEREUM_PRIVATE_KEY\n")),(0,a.kt)("p",null,"where"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ETHEREUM_PRIVATE_KEY \u2014 your signer Ethereum private key.")),(0,a.kt)("p",null,"When prompted, set up a password to the keystore file."),(0,a.kt)("p",null,"This will generate a ",(0,a.kt)("inlineCode",{parentName:"p"},"UTC-<time>-<address>")," keystore file."),(0,a.kt)("p",null,"Move the generated keystore file to the Bttc configuration directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"mv ./UTC-<time>-<address> ~/.bttc/keystore/\n")),(0,a.kt)("h3",{id:"add-passwordtxt"},"Add password.txt"),(0,a.kt)("p",null,"Make sure to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"password.txt")," file then add the Bttc keystore file password right in the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.bttc/password.txt")," file."),(0,a.kt)("h3",{id:"add-your-ethereum-address"},"Add your Ethereum address"),(0,a.kt)("p",null,"Make sure to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"address.txt")," file,then add the Bttc address file  right in the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.bttc/address.txt")," file.\nOpen for editing ",(0,a.kt)("inlineCode",{parentName:"p"},"vi ~/.bttc/address.txt"),"."),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"address.txt"),", add your Ethereum address. Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"0xca67a8D767e45056DC92384b488E9Af654d78DE2"),"."),(0,a.kt)("p",null,"Save the changes in ",(0,a.kt)("inlineCode",{parentName:"p"},"address.txt"),"."),(0,a.kt)("h2",{id:"start-the-validator-node"},"Start the validator node"),(0,a.kt)("p",null,"At this point, you must have:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Delivery service on the sentry machine fully synced and running."),(0,a.kt)("li",{parentName:"ul"},"The Bttc service on the sentry machine running."),(0,a.kt)("li",{parentName:"ul"},"The Delivery service and the Bttc service on the validator machine configured."),(0,a.kt)("li",{parentName:"ul"},"Your signer keys configured.")),(0,a.kt)("h3",{id:"start-the-delivery-service-1"},"Start the Delivery service"),(0,a.kt)("p",null,"You will now start the Delivery service on the validator machine. Once the Delivery service syncs, you will start the Bttc service on the validator machine."),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/node/delivery")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd ~/node/delivery\n")),(0,a.kt)("p",null,"Start the Delivery service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash delivery-start.sh\n")),(0,a.kt)("p",null,"Start the Delivery rest-server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash delivery-server-start.sh\n")),(0,a.kt)("p",null,"Start the Delivery bridge:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash delivery-bridge-start.sh \n")),(0,a.kt)("p",null,"Check the sync status of Delivery:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl localhost:26657/status\n")),(0,a.kt)("p",null,"In the output, the ",(0,a.kt)("inlineCode",{parentName:"p"},"catching_up")," value is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"true")," \u2014 the Delivery service is syncing."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"false")," \u2014 the Delivery service is fully synced.")),(0,a.kt)("p",null,"Wait for the Delivery service to fully sync."),(0,a.kt)("h3",{id:"start-the-bttc-service-1"},"Start the Bttc service"),(0,a.kt)("p",null,"Once the Delivery service on the validator machine is fully synced, start the Bttc service on the validator machine."),(0,a.kt)("p",null,"Change to the ",(0,a.kt)("inlineCode",{parentName:"p"},"~/node/bttc")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd ~/node/bttc\n")),(0,a.kt)("p",null,"Start the Bttc service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bash start.sh\n")))}c.isMDXComponent=!0}}]);